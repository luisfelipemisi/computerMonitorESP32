/*
 *  This sketch sends data via HTTP GET requests to data.sparkfun.com service.
 *
 *  You need to get streamId and privateKey at data.sparkfun.com and paste them
 *  below. Or just customize this script to talk to other HTTP servers.
 *
 */

#include <WiFi.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED width,  in pixels
#define SCREEN_HEIGHT 64 // OLED height, in pixels

// create an OLED display object connected to I2C
Adafruit_SSD1306 oled(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

const char* ssid     = "sala da justica";
const char* password = "26041996";

const char* host = "10.0.0.189";
const char* streamId   = "....................";
const char* privateKey = "....................";

// 'load_1', 52x52px
const unsigned char epd_bitmap_load_1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 
	0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x01, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x1c, 0x03, 0x80, 0x01, 0x80, 0x00, 0x00, 0x38, 0x07, 0x00, 0x01, 0x80, 0x00, 
	0x00, 0x38, 0x02, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x60, 
	0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x00, 0x00, 
	0x00, 0x60, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x70, 
	0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 
	0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x30, 0x00, 0x01, 0xc0, 0x00, 
	0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 
	0x70, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x60, 0x00, 
	0x00, 0x70, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x38, 
	0x00, 0x0c, 0x01, 0xc0, 0x00, 0x00, 0x38, 0x00, 0x1c, 0x03, 0x80, 0x00, 0x00, 0x18, 0x00, 0x38, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x1e, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc1, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'load_2', 52x52px
const unsigned char epd_bitmap_load_2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xe0, 
	0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x70, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x00, 0xf0, 0x00, 0x00, 0x1c, 0x31, 
	0xe0, 0x01, 0xf8, 0x00, 0x00, 0x0e, 0x31, 0xc0, 0x03, 0xfc, 0x00, 0x00, 0x07, 0x3b, 0x80, 0x07, 
	0xfe, 0x00, 0x00, 0x03, 0xff, 0x00, 0x06, 0xe7, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x0e, 0xe3, 0x80, 
	0x00, 0x00, 0xfe, 0x00, 0x1c, 0xe1, 0xc0, 0x00, 0x00, 0x7c, 0x00, 0x38, 0x60, 0x80, 0x00, 0x00, 
	0x38, 0x00, 0x10, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x08, 0x00, 
	0x00, 0x00, 0x03, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 768)
const int epd_bitmap_allArray_LEN = 2;
const unsigned char* epd_bitmap_allArray[2] = {
	epd_bitmap_load_1,
	epd_bitmap_load_2
};



void setup()
{
    Serial.begin(115200);
    delay(10);

  // initialize OLED display with I2C address 0x3C
  if (!oled.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("failed to start SSD1306 OLED"));
    while (1);
  }

    oled.clearDisplay(); // clear display
    oled.setTextSize(1);         // set text size
    oled.setTextColor(WHITE);    // set text color
    oled.setCursor(0, 0);       // set position to display
    oled.println("starting"); // set text
    oled.display();  
    
    

    Serial.println();
    Serial.println();
    Serial.print("Connecting to ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    while (WiFi.status() != WL_CONNECTED) {
        oled.clearDisplay(); // clear display
        // We start by connecting to a WiFi network
        oled.setCursor(0, 0);       // set position to display
        oled.println("Connecting to"); // set text
        oled.setCursor(0, 10);       // set position to display
        oled.println(ssid); // set text
        oled.drawBitmap(50, 0, epd_bitmap_allArray[0], 52, 52, WHITE);
        oled.display();
        delay(500);
        Serial.print(".");
        oled.clearDisplay(); // clear display
        // We start by connecting to a WiFi network
        oled.setCursor(0, 0);       // set position to display
        oled.println("Connecting to"); // set text
        oled.setCursor(0, 10);       // set position to display
        oled.println(ssid); // set text
        oled.display();
        oled.drawBitmap(50, 0, epd_bitmap_allArray[1], 52, 52, WHITE);
        oled.display();
        delay(500);
    }

    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
}

int value = 0;
WiFiClient client;

void loop()
{
    delay(5000);
    ++value;

    Serial.print("connecting to ");
    Serial.println(host);

    // Use WiFiClient class to create TCP connections
    
    const int httpPort = 8085;
    if (!client.connect(host, httpPort)) {
        Serial.println("connection failed");
        return;
    }

    // We now create a URI for the request
    String url = "/data.json";

    Serial.print("Requesting URL: ");
    Serial.println(url);

    // This will send the request to the server
    client.print(String("GET ") + url + " HTTP/1.1\r\n" + "Host: " + host + "\r\n" + "Connection: close\r\n\r\n");
    skipResponseHeaders();
    
    disconnect();
    wait();
    Serial.println();
    Serial.println("closing connection");
}

bool skipResponseHeaders() {
  // HTTP headers end with an empty line
  char endOfHeaders[] = "\r\n\r\n";

  client.setTimeout(1000);
  bool ok = client.find(endOfHeaders);

  if (!ok) {
    Serial.println("No response or invalid response!");
  }else{
    Serial.println("OK");
    DynamicJsonDocument doc(16384);
    Serial.println(doc.capacity());
    DeserializationError  err = deserializeJson(doc, client,DeserializationOption::NestingLimit(20));
    if (err) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(err.c_str());
    }else{
        JsonObject obj = doc.as<JsonObject>();
        for(int i = 0;  ;i++){
          String sensor = obj["Children"][0]["Children"][i]["Text"];
          if (sensor == "null"){
            break;
          }else{
            Serial.println(sensor);
          }
        }
    }
  }

  return ok;
}

// Close the connection with the HTTP server
void disconnect() {
  Serial.println("Disconnect");
  client.stop();
}

// Pause for a 1 minute
void wait() {
  Serial.println("Wait 3 seconds");
  delay(3000);
}